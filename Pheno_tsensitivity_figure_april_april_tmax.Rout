
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # Setup ------------------------------------------------------------------------
> #
> # To get a quick overview of the sections of this code, go to RStudio menu bar ->
> # Edit -> Folding -> Collapse all.
> #
> 
> library(tidyverse)
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ──
✔ ggplot2 3.3.5     ✔ purrr   0.3.4
✔ tibble  3.1.3     ✔ dplyr   1.0.7
✔ tidyr   1.1.3     ✔ stringr 1.4.0
✔ readr   2.0.0     ✔ forcats 0.5.1
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
> library(lubridate)

Attaching package: ‘lubridate’

The following objects are masked from ‘package:base’:

    date, intersect, setdiff, union

> library(tidybayes)
> library(patchwork)
> library(gridExtra)

Attaching package: ‘gridExtra’

The following object is masked from ‘package:dplyr’:

    combine

> library(knitr)
> library(scales)

Attaching package: ‘scales’

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor

> library(broom.mixed)
> library(tictoc)
> 
> # rstanarm stuff
> options(mc.cores = parallel::detectCores())
> library(rstanarm)
Loading required package: Rcpp
This is rstanarm version 2.21.1
- See https://mc-stan.org/rstanarm/articles/priors for changes to default priors!
- Default priors may change, so it's safest to specify priors, even if equivalent to the defaults.
- For execution on a local, multicore CPU with excess RAM we recommend calling
  options(mc.cores = parallel::detectCores())
> library(patchwork)
> # Number of MCMC chains & number of simulations per chain.
> # Need to increase this at the end
> n_iter <- 10000
> n_chains <- 2
> 
> # Objects to keep during memory management clean-up
> objects_to_keep <- c(
+   "objects_to_keep", "n_iter", "n_chains",
+   "fig6_RP", "fig6_DP", "fig6_RP_hf", "fig6_DP_hf",
+   "fig6_RP_mrdoy", "fig6_DP_mrdoy", "fig6_RP_mrdoy_hf", "fig6_DP_mrdoy_hf",
+   "fig6_RP_sl", "fig6_DP_sl", "fig6_RP_sl_hf", "fig6_DP_sl_hf",
+   "fig6_RP_mr", "fig6_DP_mr", "fig6_RP_mr_hf", "fig6_DP_mr_hf",
+   "fig6_RP_tot", "fig6_DP_tot", "fig6_RP_tot_hf", "fig6_DP_tot_hf",
+   "woodtable","Wood_pheno_table_RP","Wood_pheno_table_DP","Wood_pheno_table_RP_hf","Wood_pheno_table_DP_hf", "woodtable_hf",
+   "predictions_RP", "predictions_DP"
+ )
> 
> # Start timer
> tic()
> 
> 
> 
> # 1. Run analysis on SCBI ---------------------------------------------------------
> ## Get growth data --------------------------------------------------------------
> Wood_pheno_table <- read_csv("Data/dendrobands/SCBI/modeled/Wood_pheno_table_SCBI_CLEAN.csv") %>%
+   # Keep only RP and DP for now
+   filter(wood_type != "other") %>%
+   # filter(tot >= 1) %>%
+   # filter(tot <= 12.06)%>%
+   # Rename ring porous to not have a space
+   mutate(wood_type = ifelse(wood_type == "ring porous", "ring-porous", wood_type))
Rows: 2712 Columns: 18
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (4): sp, wood_type, tag_year_perc, rm
dbl (14): tot, perc, tag, stem, DOY, year, dbh, max_rate_DOY, max_rate, doy,...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> Wood_pheno_table$DOY <- Wood_pheno_table$doy
> 
> 
> twofive <- filter(Wood_pheno_table, perc == .25)
> fifty <- filter(Wood_pheno_table, perc == .5)
> sevenfive <- filter(Wood_pheno_table, perc == .75)
> # 25-50
> twofifty <- cbind(twofive, fifty$DOY)
> twofifty$twentyfive_to_fifty <- twofifty$`fifty$DOY` - twofifty$DOY
> twofifty <- twofifty[, c(3, 7, 16)]
> # 50-75
> fiftyseventy <- cbind(fifty, sevenfive$DOY)
> fiftyseventy$fifty_to_seventy <- fiftyseventy$`sevenfive$DOY` - fiftyseventy$DOY
> fiftyseventy <- fiftyseventy[, c(3, 7, 16)]
> # 25-75
> twosevenfive <- cbind(twofive, sevenfive$DOY)
> twosevenfive$seasonlength <- twosevenfive$`sevenfive$DOY` - twosevenfive$DOY
> twosevenfive <- twosevenfive[, c(3, 7, 20)]
> 
> 
> ## Create temperature variables -------------------------------------------------
> # 0. Get all weather data
> #TMAX
> 
> weatherdata <-
+   read_csv("Data/climate data/SCBI/met_tower_data_sensor2_ncdc_supplemented.csv") %>%
+   filter(!is.na(cleantmax)) %>%
+   mutate(year = year.x)
Rows: 3501 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl  (5): year.x, month, day, doy, cleantmax
date (1): DATE

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> #TMIN
> #weatherdata <-
> #  read_csv("climate data/SCBI/SCBI_tmin.csv") %>%
> #  filter(!is.na(TMIN))
> 
> # 2. Get climwin data
> #TMAX
> climwinmeans_rp <- weatherdata %>%
+   filter(month %in% c(5)) %>%
+   group_by(year) %>%
+   summarize(climwinmean = mean(cleantmax)) %>%
+   mutate(wood_type = "ring-porous")
> 
> #actual 14.5-20
> #4/6-4/12 11-24.5
> #4/3-4/9  13.5-21.5
> #4/9-4/9 8-22
> #4/9-4/16 14-26
> #TMIN
> #climwinmeans_rp <- weatherdata %>%
> #  filter(doy %in% c(climwindows[1, 11]:climwindows[1, 12])) %>%
> #  group_by(year) %>%
> #  summarize(climwinmean = mean(TMIN)) %>%
> #  mutate(wood_type = "ring-porous")
> #TMAX
> climwinmeans_dp <- weatherdata %>%
+   filter(month %in% c(5)) %>% # 68:135
+   group_by(year) %>%
+   summarize(climwinmean = mean(cleantmax)) %>%
+   mutate(wood_type = "diffuse-porous")
> 
> #TMIN
> #climwinmeans_dp <- weatherdata %>%
> #  filter(doy %in% c(climwindows[4, 11]:climwindows[4, 12])) %>% # 68:135
> #  group_by(year) %>%
> #  summarize(climwinmean = mean(TMIN)) %>%
> #  mutate(wood_type = "diffuse-porous")
> 
> # Combine
> climwinmeans <- bind_rows(climwinmeans_rp, climwinmeans_dp)
> 
> #TMAX
> climwinmeans <- weatherdata %>%
+   filter(month %in% c(5)) %>%
+   group_by(year) %>%
+   summarize(climwinmean = mean(cleantmax))
> #TMIN
> #april_means <- weatherdata %>%
> #  filter(month == 4) %>%
> #  group_by(year) %>%
> #  summarize(april_mean = mean(TMIN))
> 
> # 3. Add to growth data
> Wood_pheno_table <- Wood_pheno_table %>%
+   #left_join(april_means, by = "year") %>%
+   left_join(climwinmeans, by = c("year")) %>%#, "wood_type")) %>%
+   left_join(twosevenfive, by = c("tag", "year")) %>%
+   left_join(fiftyseventy, by = c("tag", "year")) %>%
+   left_join(twofifty, by = c("tag", "year")) %>%
+   # Remove other variables
+   # select(-c(tot, dbh, max_rate_DOY, max_rate)) %>%
+   mutate(
+     perc = case_when(
+       perc == 0.25 ~ "DOY_25",
+       perc == 0.5 ~ "DOY_50",
+       perc == 0.75 ~ "DOY_75"
+     )
+   ) %>%
+   arrange(tag, year) %>%
+   mutate(tag_year_perc = paste0(tag, year, perc))
> 
> # Pick out only distinct rows
> unitag <- unique(Wood_pheno_table$tag_year_perc)
> Wood_pheno_table <- distinct(Wood_pheno_table, tag_year_perc, .keep_all = TRUE)
> 
> 
> ### Model Fit 1 (multivariate): (DOY_25, DOY_50, DOY_75) using climwinmeans ----
> # Convert to wide format for use in rstanarm::stan_mvmer()
> Wood_pheno_table_wide <- Wood_pheno_table %>%
+   select(perc, tag, year, wood_type, sp, climwinmean, starts_with("DOY")) %>%
+   pivot_wider(names_from = perc, values_from = DOY)
> 
> # Fit multivariate model
> joint_model_climwinmeans <- stan_mvmer(
+   formula = list(
+     DOY_25 ~ wood_type + wood_type:climwinmean + (1 | tag),
+     DOY_50 ~ wood_type + wood_type:climwinmean + (1 | tag),
+     DOY_75 ~ wood_type + wood_type:climwinmean + (1 | tag)
+   ),
+   # Note we transform the data from tall/tidy format to wide format first:
+   data = Wood_pheno_table_wide,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )
Fitting a multivariate glmer model.

Please note the warmup may be much slower than later iterations!

SAMPLING FOR MODEL 'mvmer' NOW (CHAIN 1).

SAMPLING FOR MODEL 'mvmer' NOW (CHAIN 2).
Chain 1: 
Chain 1: Gradient evaluation took 0.000638 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 6.38 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: 
Chain 2: Gradient evaluation took 0.000621 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 6.21 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 107.609 seconds (Warm-up)
Chain 2:                85.5908 seconds (Sampling)
Chain 2:                193.2 seconds (Total)
Chain 2: 
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 105.963 seconds (Warm-up)
Chain 1:                90.5446 seconds (Sampling)
Chain 1:                196.508 seconds (Total)
Chain 1: 
> 
> # Get regression table as output by rstanarm package, then clean. We will compare
> # this table to posterior means of all fixed effects we compute later:
> bayesian_regression_table <- joint_model_climwinmeans %>%
+   summary() %>%
+   as_tibble(rownames = "coefficient") %>%
+   # Keep only relevant columns:
+   select(coefficient, mean, sd, `2.5%`, `97.5%`) %>%
+   # Keep only relevant rows:
+   filter(!str_detect(coefficient, "Sigma")) %>%
+   filter(str_detect(coefficient, "(Intercept)") | str_detect(coefficient, "wood_type"))
> bayesian_regression_table
# A tibble: 12 × 5
   coefficient                               mean     sd `2.5%` `97.5%`
   <chr>                                    <dbl>  <dbl>  <dbl>   <dbl>
 1 y1|(Intercept)                         182.     5.76  170.   193.   
 2 y1|wood_typering-porous                -37.0    7.55  -51.5  -22.2  
 3 y1|wood_typediffuse-porous:climwinmean  -1.12   0.241  -1.59  -0.641
 4 y1|wood_typering-porous:climwinmean     -0.728  0.207  -1.14  -0.323
 5 y2|(Intercept)                         205.     5.76  193.   216.   
 6 y2|wood_typering-porous                -24.6    7.57  -39.3   -9.79 
 7 y2|wood_typediffuse-porous:climwinmean  -1.35   0.237  -1.82  -0.895
 8 y2|wood_typering-porous:climwinmean     -1.10   0.206  -1.50  -0.703
 9 y3|(Intercept)                         230.     7.86  214.   245.   
10 y3|wood_typering-porous                  1.46  10.3   -18.5   22.0  
11 y3|wood_typediffuse-porous:climwinmean  -1.67   0.324  -2.31  -1.02 
12 y3|wood_typering-porous:climwinmean     -1.99   0.276  -2.54  -1.46 
> write.csv(bayesian_regression_table, file = "Results/Bayesian outputs/DOY_SCBI_april.csv", row.names = FALSE)
> # Extract predicted DOY_25, DOY_50, DOY_75
> # Note we need to take this long approach since tidybayes::add_predicted_draws()
> # yields incorrected predicted/fitted values for stan_mvmer models as of 2020/11/18
> # See https://github.com/mjskay/tidybayes/issues/271
> y_hat <- c(
+   joint_model_climwinmeans %>% posterior_predict(m = 1) %>% c(),
+   joint_model_climwinmeans %>% posterior_predict(m = 2) %>% c(),
+   joint_model_climwinmeans %>% posterior_predict(m = 3) %>% c()
+ )
> predictions <- Wood_pheno_table %>%
+   add_predicted_draws(joint_model_climwinmeans) %>%
+   ungroup() %>%
+   # Critical: sort by y outcome category (DOY_25, DOY_50, DOY_75) first
+   arrange(perc, tag, year) %>%
+   mutate(predictions_rstanarm = y_hat)
> 
> predictions_RP <- filter(predictions, wood_type == "ring-porous")
> predictions_DP <- filter(predictions, wood_type == "diffuse-porous")
> Wood_pheno_table_RP <- filter(Wood_pheno_table, wood_type == "ring-porous")
> Wood_pheno_table_DP <- filter(Wood_pheno_table, wood_type == "diffuse-porous")
> predictions_RP$sig <- ifelse(predictions_RP$perc == "DOY_25", 1, 0)
> 
> woodtable <- filter(Wood_pheno_table, perc == "DOY_25")
> 
> # Add max rate DOY
> # maxrateDOY_formulaRP <- "max_rate_DOY ~wood_type + wood_type:climwinmean + (1|tag)" %>% as.formula()
> #
> # mixedmodel_stanlmerRP_maxrateDOY <- stan_lmer(
> #   formula = maxrateDOY_formulaRP,
> #   data = woodtable,
> #   seed = 349,
> #   iter = n_iter,
> #   chains = n_chains
> # )
> #
> # MRDOY_scbi <- mixedmodel_stanlmerRP_maxrateDOY %>%
> #   tidy(conf.int = TRUE)
> # write.csv(MRDOY_scbi, file = "Results/Bayesian outputs/MRDOY_SCBI_april.csv", row.names = FALSE)
> #
> # y_hat <- mixedmodel_stanlmerRP_maxrateDOY %>%
> #   posterior_predict() %>%
> #   c()
> #
> # predictions_mrdoy <- woodtable %>%
> #   add_predicted_draws(mixedmodel_stanlmerRP_maxrateDOY) %>%
> #   ungroup() %>%
> #   arrange(tag, year) %>%
> #   mutate(predictions_rstanarm = y_hat)
> #
> # predictions_mrdoy_RP <- filter(predictions_mrdoy, wood_type == "ring-porous")
> # predictions_mrdoy_RP$perc <- "Max Rate DOY"
> # predictions_mrdoy_RP$sig <- 0
> # predictions_RP <- bind_rows(predictions_RP, predictions_mrdoy_RP)
> # predictions_mrdoy_DP <- filter(predictions_mrdoy, wood_type == "diffuse-porous")
> # predictions_mrdoy_DP$perc <- "Max Rate DOY"
> # predictions_DP <- bind_rows(predictions_DP, predictions_mrdoy_DP)
> #
> # Wood_pheno_table_RP_mrdoy <- filter(woodtable, wood_type == "ring-porous")
> # Wood_pheno_table_RP_mrdoy$perc <- "Max Rate DOY"
> # Wood_pheno_table_RP_mrdoy$DOY <- Wood_pheno_table_RP_mrdoy$max_rate_DOY
> # Wood_pheno_table_RP <- bind_rows(Wood_pheno_table_RP_mrdoy,Wood_pheno_table_RP)
> #
> # Wood_pheno_table_DP_mrdoy <- filter(woodtable, wood_type == "diffuse-porous")
> # Wood_pheno_table_DP_mrdoy$perc <- "Max Rate DOY"
> # Wood_pheno_table_DP_mrdoy$DOY <- Wood_pheno_table_DP_mrdoy$max_rate_DOY
> # Wood_pheno_table_DP <- bind_rows(Wood_pheno_table_DP_mrdoy, Wood_pheno_table_DP)
> # #Wood_pheno_table_DP2 <- Wood_pheno_table_DP %>% mutate(perc = factor(perc, levels = c("Max Rate DOY", "DOY_25", "DOY_50", "DOY_75")))
> 
> 
> fig6_RP <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_RP, aes(x = climwinmean, y = predictions_rstanarm, col = perc, fill = perc, linetype = perc), .width = .95, alpha = 0.15) +
+   stat_lineribbon(data = predictions_RP, aes(x = climwinmean, y = predictions_rstanarm, col = perc, fill = perc, linetype = perc), .width = 0, alpha = 0.75) +
+   geom_point(data = Wood_pheno_table_RP, aes(x = climwinmean, y = DOY, col = perc)) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   scale_linetype_manual(values = c("solid", "solid", "solid")) +
+   scale_color_manual(values = c("orange","red","purple", "orange", "red", "purple"))+
+   scale_fill_manual(values = c("orange","red","purple", "orange", "red", "purple"))+
+   #scale_fill_brewer() +
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_RP$climwinmean)-.5,max(Wood_pheno_table_RP$climwinmean)+.5), ylim = c(min(Wood_pheno_table_RP$DOY)-3,max(Wood_pheno_table_RP$DOY)+3)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35),
+         plot.title = element_text(size =25),
+         plot.subtitle = element_text(size = 25)) +
+   guides(col = guide_legend(override.aes = list(size = 1)))+
+   labs(x = "", y = "DOY", col = "Percentile", title = "SCBI", subtitle = "Ring-porous")
> 
> 
> fig6_DP <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_DP, aes(x = climwinmean, y = predictions_rstanarm, col = perc, fill = perc), .width = .95, alpha = 0.15, linetype = "solid") +
+   stat_lineribbon(data = predictions_DP, aes(x = climwinmean, y = predictions_rstanarm, col = perc, fill = perc), .width = 0, alpha = 0.75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_DP, aes(x = climwinmean, y = DOY, col = perc)) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   scale_color_manual(values = c("orange","red","purple", "orange", "red", "purple"))+
+   scale_fill_manual(values = c("orange","red","purple", "orange", "red", "purple"))+
+   #scale_fill_brewer() +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35),
+         plot.title = element_text(size =25),
+         plot.subtitle = element_text(size = 25)) +
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_DP$climwinmean)-.5,max(Wood_pheno_table_DP$climwinmean)+.5), ylim = c(min(Wood_pheno_table_DP$DOY)-3,max(Wood_pheno_table_DP$DOY)+3)) +
+   labs(x = "", y = "", col = "Percentile", title = "SCBI", subtitle = "Diffuse-porous")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> 
> ### Model Fit 2: TOTAL GROWTH ----
> total_formulaRP <- "dbh_total_growth ~ wood_type + wood_type:climwinmean + (1|tag)" %>% as.formula()
> 
> mixedmodel_stanlmerRP_total <- stan_lmer(
+   formula = total_formulaRP,
+   data = woodtable,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).
Chain 2Chain 1: 
Chain 1: Gradient evaluation took 0.000521 seconds
: Chain 
1: 1000 transitions using 10 leapfrog steps per transition would take 5.21 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: Gradient evaluation took 0.001039 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 10.39 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 22.4632 seconds (Warm-up)
Chain 1:                26.4295 seconds (Sampling)
Chain 1:                48.8927 seconds (Total)
Chain 1: 
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 22.1256 seconds (Warm-up)
Chain 2:                27.5148 seconds (Sampling)
Chain 2:                49.6403 seconds (Total)
Chain 2: 
> 
> tot_scbi <- mixedmodel_stanlmerRP_total %>%
+   tidy(conf.int = TRUE)
> write.csv(tot_scbi, file = "Results/Bayesian outputs/TOT_SCBI_april.csv", row.names = FALSE)
> y_hot <- mixedmodel_stanlmerRP_total %>%
+   posterior_predict() %>%
+   c()
> 
> predictions_tot <- woodtable %>%
+   add_predicted_draws(mixedmodel_stanlmerRP_total) %>%
+   ungroup() %>%
+   arrange(tag, year) %>%
+   mutate(predictions_rstanarm = y_hot)
> 
> predictions_tot_RP <- filter(predictions_tot, wood_type == "ring-porous")
> predictions_tot_DP <- filter(predictions_tot, wood_type == "diffuse-porous")
> Wood_pheno_table_RP_tot <- filter(woodtable, wood_type == "ring-porous")
> Wood_pheno_table_DP_tot <- filter(woodtable, wood_type == "diffuse-porous")
> 
> summary(lm(Wood_pheno_table_RP_tot$tot~Wood_pheno_table_RP_tot$climwinmean))

Call:
lm(formula = Wood_pheno_table_RP_tot$tot ~ Wood_pheno_table_RP_tot$climwinmean)

Residuals:
     Min       1Q   Median       3Q      Max 
-0.43257 -0.16766 -0.04197  0.12080  1.53774 

Coefficients:
                                     Estimate Std. Error t value Pr(>|t|)    
(Intercept)                          0.924884   0.135977   6.802 2.77e-11 ***
Wood_pheno_table_RP_tot$climwinmean -0.017652   0.005705  -3.094  0.00208 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.2666 on 535 degrees of freedom
Multiple R-squared:  0.01758,	Adjusted R-squared:  0.01574 
F-statistic: 9.573 on 1 and 535 DF,  p-value: 0.002078

> plot(Wood_pheno_table_RP_tot$tot~Wood_pheno_table_RP_tot$climwinmean)
> abline(lm(Wood_pheno_table_RP_tot$tot~Wood_pheno_table_RP_tot$climwinmean))
> 
> fig6_RP_tot <-  ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_tot_RP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95, alpha = .10,linetype = "solid") +
+   stat_lineribbon(data = predictions_tot_RP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0, alpha = .75 ,linetype = "solid") +
+   geom_point(data = Wood_pheno_table_RP_tot, aes(x = climwinmean, y = dbh_total_growth, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   #scale_fill_brewer() +
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_RP$climwinmean)-.5,max(Wood_pheno_table_RP$climwinmean)+.5),ylim = c(min(Wood_pheno_table_RP_tot$tot),max(Wood_pheno_table_RP_tot$tot))) +
+   theme_bw()+
+   theme(legend.position = "none",
+         text = element_text(size = 35),
+         axis.text.x = element_text(size = 25),
+         axis.title.x = element_text(size = 25)) +
+   labs(x =expression(paste("May ", T[max], " (°C)")) , y = expression(paste(Delta * "DBH", " (cm)")))
> 
> fig6_DP_tot <-  ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_tot_DP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95, alpha = .10, linetype = "solid") +
+   stat_lineribbon(data = predictions_tot_DP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0, alpha = .75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_DP_tot, aes(x = climwinmean, y = dbh_total_growth, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer("purple", "purple") +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_DP$climwinmean)-.5,max(Wood_pheno_table_DP$climwinmean)+.5), ylim = c(min(Wood_pheno_table_DP_tot$tot),max(Wood_pheno_table_DP_tot$tot))) +
+   theme_bw()+
+   theme(legend.position = "none",
+         text = element_text(size = 35),
+         axis.text.x = element_text(size = 25),
+         axis.title.x = element_text(size = 25)) +
+   labs(x = expression(paste("May ", T[max], " (°C)")), y = "")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> 
> ### Model Fit 3: Season length ----
> seasonlength_formulaRP <- "seasonlength ~ wood_type + wood_type:climwinmean + (1|tag)" %>% as.formula()
> 
> mixedmodel_stanlmerRP_seasonlength <- stan_lmer(
+   formula = seasonlength_formulaRP,
+   data = woodtable,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).
Chain 1: 
Chain 1: Gradient evaluation took 0.000332 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.32 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: 
Chain 2: Gradient evaluation took 0.000354 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.54 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 24.2728 seconds (Warm-up)
Chain 2:                18.9267 seconds (Sampling)
Chain 2:                43.1995 seconds (Total)
Chain 2: 
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 23.9758 seconds (Warm-up)
Chain 1:                25.1866 seconds (Sampling)
Chain 1:                49.1624 seconds (Total)
Chain 1: 
> 
> SL_scbi <- mixedmodel_stanlmerRP_seasonlength %>%
+   tidy(conf.int = TRUE)
> write.csv(SL_scbi, file = "Results/Bayesian outputs/SL_SCBI_april.csv", row.names = FALSE)
> 
> y_hit <- mixedmodel_stanlmerRP_seasonlength %>%
+   posterior_predict() %>%
+   c()
> 
> predictions_sl <- woodtable %>%
+   add_predicted_draws(mixedmodel_stanlmerRP_seasonlength) %>%
+   ungroup() %>%
+   arrange(tag, year) %>%
+   mutate(predictions_rstanarm = y_hit)
> 
> predictions_sl_RP <- filter(predictions_sl, wood_type == "ring-porous")
> predictions_sl_DP <- filter(predictions_sl, wood_type == "diffuse-porous")
> Wood_pheno_table_RP_sl <- filter(woodtable, wood_type == "ring-porous")
> Wood_pheno_table_DP_sl <- filter(woodtable, wood_type == "diffuse-porous")
> 
> fig6_RP_sl <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_sl_RP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha = .10, linetype = "solid") +
+   stat_lineribbon(data = predictions_sl_RP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_RP_sl, aes(x = climwinmean, y = seasonlength, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_RP$climwinmean)-.5,max(Wood_pheno_table_RP$climwinmean)+.5), ylim = c(min(Wood_pheno_table_RP_sl$seasonlength),95)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35)) +
+   labs(x = "", y = expression(paste(L[pgs], " (days)")))
> 
> fig6_DP_sl <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_sl_DP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha = .10, linetype = "solid") +
+   stat_lineribbon(data = predictions_sl_DP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_DP_sl, aes(x = climwinmean, y = seasonlength, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_DP$climwinmean)-.5,max(Wood_pheno_table_DP$climwinmean)+.5), ylim = c(3, 90)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35)) +
+   labs(x = "", y = "")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> ### Model Fit 4: MAX RATE ----
> maxrate_formulaRP <- "max_rate ~ wood_type + wood_type:climwinmean + (1|tag)" %>% as.formula()
> 
> mixedmodel_stanlmerRP_maxrate <- stan_lmer(
+   formula = maxrate_formulaRP,
+   data = woodtable,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.000512 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 5.12 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: 
Chain 2: Gradient evaluation took 0.000357 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.57 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 161.081 seconds (Warm-up)
Chain 1:                37.0087 seconds (Sampling)
Chain 1:                198.089 seconds (Total)
Chain 1: 
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 211.699 seconds (Warm-up)
Chain 2:                37.5208 seconds (Sampling)
Chain 2:                249.22 seconds (Total)
Chain 2: 
> 
> MR_scbi <- mixedmodel_stanlmerRP_maxrate %>%
+   tidy(conf.int = TRUE)
> write.csv(MR_scbi, file = "Results/Bayesian outputs/MR_SCBI_april.csv", row.names = FALSE)
> 
> y_het <- mixedmodel_stanlmerRP_maxrate %>%
+   posterior_predict() %>%
+   c()
> 
> predictions_mr <- woodtable %>%
+   add_predicted_draws(mixedmodel_stanlmerRP_maxrate) %>%
+   ungroup() %>%
+   arrange(tag, year) %>%
+   mutate(predictions_rstanarm = y_het)
> 
> predictions_mr_RP <- filter(predictions_mr, wood_type == "ring-porous")
> predictions_mr_DP <- filter(predictions_mr, wood_type == "diffuse-porous")
> Wood_pheno_table_RP_mr <- filter(woodtable, wood_type == "ring-porous")
> Wood_pheno_table_DP_mr <- filter(woodtable, wood_type == "diffuse-porous")
> 
> fig6_RP_mr <-  ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_mr_RP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha = .10, linetype = "dashed") +
+   stat_lineribbon(data = predictions_mr_RP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "dashed") +
+   geom_point(data = Wood_pheno_table_RP_mr, aes(x = climwinmean, y = max_rate, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_RP$climwinmean)-.5,max(Wood_pheno_table_RP$climwinmean)+.5), ylim = c(-.001, 0.015)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35)) +
+   labs(x = "", y = expression(paste(g[max], " (cm/day)")))
> 
> fig6_DP_mr <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_mr_DP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha = .10, linetype = "solid") +
+   stat_lineribbon(data = predictions_mr_DP, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_DP_mr, aes(x = climwinmean, y = max_rate, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_DP$climwinmean)-.5,max(Wood_pheno_table_DP$climwinmean)+.5), ylim = c(-.001, 0.015)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35)) +
+   labs(x = "", y = "")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> ### Model Fit 5: MAX RATE DOY ----
> maxrateDOY_formulaRP <- "max_rate_DOY ~wood_type + wood_type:climwinmean + (1|tag)" %>% as.formula()
> 
> mixedmodel_stanlmerRP_maxrateDOY <- stan_lmer(
+   formula = maxrateDOY_formulaRP,
+   data = woodtable,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).
Chain 1: 
Chain 1: Gradient evaluation took 0.000367 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 3.67 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: 
Chain 2: Gradient evaluation took 0.000383 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.83 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 23.2156 seconds (Warm-up)
Chain 2:                22.2106 seconds (Sampling)
Chain 2:                45.4261 seconds (Total)
Chain 2: 
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 24.6166 seconds (Warm-up)
Chain 1:                30.902 seconds (Sampling)
Chain 1:                55.5186 seconds (Total)
Chain 1: 
> 
> MRDOY_scbi <- mixedmodel_stanlmerRP_maxrateDOY %>%
+   tidy(conf.int = TRUE)
> write.csv(MRDOY_scbi, file = "Results/Bayesian outputs/MRDOY_SCBI_april.csv", row.names = FALSE)
> 
> #y_hat <- mixedmodel_stanlmerRP_maxrateDOY %>%
> #  posterior_predict() %>%
> #  c()
> 
> #predictions_mrdoy <- woodtable %>%
> #  add_predicted_draws(mixedmodel_stanlmerRP_maxrateDOY) %>%
> #  ungroup() %>%
> #  arrange(tag, year) %>%
> #  mutate(predictions_rstanarm = y_hat)#
> #
> #predictions_mrdoy_RP <- filter(predictions_mrdoy, wood_type == "ring-porous")
> #predictions_mrdoy_RP$perc <- "Max Rate DOY"
> #predictions_mrdoy_RP$sig <- 0
> #predictions_RP <- bind_rows(predictions_RP, predictions_mrdoy_RP)
> #predictions_mrdoy_DP <- filter(predictions_mrdoy, wood_type == "diffuse-porous")
> #predictions_mrdoy_DP$perc <- "Max Rate DOY"
> #predictions_DP <- bind_rows(predictions_DP, predictions_mrdoy_DP)
> 
> #Wood_pheno_table_RP_mrdoy <- filter(woodtable, wood_type == "ring-porous")
> #Wood_pheno_table_DP_mrdoy <- filter(woodtable, wood_type == "diffuse-porous")
> 
> #fig6_RP_mrdoy <- ggplot() +
> #  # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
> #  stat_lineribbon(data = predictions_mrdoy_RP, aes(x = climwinmean, y = predictions_rstanarm), .width = .95, linetype = "solid") +
> #  geom_point(data = Wood_pheno_table_RP_mrdoy, aes(x = climwinmean, y = max_rate_DOY)) +
> #  # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
> #  scale_fill_brewer() +
> #  # facet_grid(perc) +
> #  coord_cartesian(xlim = c(14.5, 20.1), ylim = c(110, 200)) +
> #  theme_bw()+
> #  theme(legend.position = "none",
> #        axis.text.x = element_blank(),
> #        text = element_text(size = 20)) +
> #  labs(x = "", y = expression(DOY[g[max]]))
> 
> #fig6_DP_mrdoy <-  ggplot() +
> #  # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
> #  stat_lineribbon(data = predictions_mrdoy_DP, aes(x = climwinmean, y = predictions_rstanarm), .width = .95, linetype = "solid") +
> # geom_point(data = Wood_pheno_table_DP_mrdoy, aes(x = climwinmean, y = max_rate_DOY)) +
> #  # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
> #  scale_fill_brewer() +
> #  # facet_grid(perc) +
> #  coord_cartesian(xlim = c(17.3, 20.8), ylim = c(133, 210)) +
> #  theme_bw()+
> #  theme(legend.position = "none",
> #        axis.text.x = element_blank(),
> #        text = element_text(size = 20)) +
> #  labs(x = "", y = "")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> 
> 
> 
> # 2. Run analysis on Harvard Forest -----------------------------------------------
> ## Get growth data --------------------------------------------------------------
> Wood_pheno_table_hf <- read_csv("Data/dendrobands/HF/modeled/Wood_pheno_table_HarvardForest_CLEAN.csv") %>%
+   # Keep only RP and DP for now
+   filter(wood_type != "other") %>%
+   # filter(tot >= 1) %>%
+   # filter(tot <= 12.06)%>%
+   # Rename ring porous to not have a space
+   mutate(wood_type = ifelse(wood_type == "ring porous", "ring-porous", wood_type))
Rows: 3897 Columns: 20
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
chr  (8): tag, sp, wood_type, site_tag, site, tag_year, tag_year_perc, rm
dbl (12): tot, perc, DOY, year, dbh, max_rate_DOY, max_rate, realtag, doy, m...

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> # Wood_pheno_table$tag <- substr(Wood_pheno_table$tag,1, nchar(as.character(Wood_pheno_table$tag))-4)
> 
> Wood_pheno_table_hf$DOY <- Wood_pheno_table_hf$doy
> 
> twofive_hf <- filter(Wood_pheno_table_hf, perc == .25)
> fifty_hf <- filter(Wood_pheno_table_hf, perc == .5)
> sevenfive_hf <- filter(Wood_pheno_table_hf, perc == .75)
> # 25-50
> twofifty_hf <- cbind(twofive_hf, fifty_hf$DOY)
> twofifty_hf$twentyfive_to_fifty <- twofifty_hf$`fifty_hf$DOY` - twofifty_hf$DOY
> twofifty_hf <- twofifty_hf[, c(3, 6, 17)]
> # 50-75
> fiftyseventy_hf <- cbind(fifty_hf, sevenfive_hf$DOY)
> fiftyseventy_hf$fifty_to_seventy <- fiftyseventy_hf$`sevenfive_hf$DOY` - fiftyseventy_hf$DOY
> fiftyseventy_hf <- fiftyseventy_hf[, c(3, 6, 17)]
> # 25-75
> twosevenfive_hf <- cbind(twofive_hf, sevenfive_hf$DOY)
> twosevenfive_hf$seasonlength <- twosevenfive_hf$`sevenfive_hf$DOY` - twosevenfive_hf$DOY
> twosevenfive_hf <- twosevenfive_hf[, c(3, 6, 22)]
> 
> 
> ## Create temperature variables -------------------------------------------------
> 
> # 0. Get all weather data
> #TMAX
> weatherdata_hf <-
+   read_csv("Data/climate data/HF/HF_weatherdata.csv") %>%
+   filter(!is.na(airtmax))
Rows: 2191 Columns: 6
── Column specification ────────────────────────────────────────────────────────
Delimiter: ","
dbl  (5): airtmax, DOY, year, month, day
date (1): date

ℹ Use `spec()` to retrieve the full column specification for this data.
ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.
> 
> #TMIN
> #weatherdata_hf <-
> #  read_csv("climate data/HF/HF_weatherdata_TMIN.csv") %>%
> #  filter(!is.na(airtmin))
> 
> # 1. Get mean march daily maximum temperatures
> #marchmeans_hf <- weatherdata_hf %>%
> #  filter(month == 3) %>%
> #  group_by(year) %>%
> #  summarize(marchmean = mean(airtmax))
> # climwindows_hf <-
> #   read.csv("results/Climwin_results/Weekly/Harvard Forest/weekly_climwin_results_HF_TMAX.csv") %>%
> #   filter(wood_type != "other") %>%
> #   mutate(
> #     #median_windowopendate = as.Date(median_windowopendate, format = "%Y-%m-%d"),
> #     #median_windowclosedate = as.Date(median_windowclosedate, format = "%Y-%m-%d"),
> #     #opendoy = yday(median_windowopendate),
> #     #closedoy = yday(median_windowclosedate)
> #     #winopen = as.Date(refwoy * 7 - winopenwoy * 7, origin = paste0("2011-01-01")),
> #     #winclose = as.Date(refwoy * 7 - winclosewoy * 7, origin = paste0("2011-01-01")),
> #     winopen = as.Date(paste(refwoy-winopenwoy, 1, sep="-"), "%U-%u"),
> #     winclose = as.Date(paste(refwoy-winclosewoy, 1, sep="-"), "%U-%u"),
> #     opendoy = yday(winopen),
> #     closedoy = yday(winclose)+4
> #   )
> #
> 
> #correct <- data.frame(1,1)
> #names(correct) <- c("min","max")
> 
> #dp <- seq(80,110,1)
> #dp2 <- seq(110,140,1)
> #dp3 <- data.frame(dp,dp2)
> #dpcross <- crossing(dp3$dp,dp3$dp2)
> 
> #for (i in c(1:nrow(dpcross))) {
> #  winopen <- dpcross[i,1]
> #  winclose <- dpcross[i,2]
> #
> #
> #  climwinmeans_dp_hf <- weatherdata_hf %>%
> #    filter(DOY %in% c(as.numeric(winopen[1,1]):as.numeric(winclose[1,1]))) %>% # 68:135
> #    group_by(year) %>%
> #    summarize(climwinmean = mean(airtmax)) %>%
> #    mutate(wood_type = "ring-porous")
> #  min <- min(climwinmeans_dp_hf$climwinmean)
> #  max <- max(climwinmeans_dp_hf$climwinmean)
> #  df <- data.frame(min,max)
> #  correct <- rbind(correct,df)
> #
> #}
> 
> # 2. Get climwin data
> #TMAX
> #TMIN
> #climwindows_hf <-
> #  read.csv("results/Climwin_results/Weekly/Harvard Forest/TMIN/weekly_climwin_results_HF_TMIN.csv") %>%
> #  filter(wood_type != "other") %>%
> #  mutate(
> #    median_windowopendate = as.Date(median_windowopendate, format = "%Y-%m-%d"),
> #    median_windowclosedate = as.Date(median_windowclosedate, format = "%Y-%m-%d"),
> #    opendoy = yday(median_windowopendate),
> #    closedoy = yday(median_windowclosedate)
> #  )
> 
> 
> #TMAX
> climwinmeans_rp_hf <- weatherdata_hf %>%
+   filter(month %in% c(5)) %>%
+   group_by(year) %>%
+   summarize(climwinmean = mean(airtmax)) %>%
+   mutate(wood_type = "ring-porous")
> 
> #TMIN
> #climwinmeans_rp_hf <- weatherdata_hf %>%
> #  filter(DOY %in% c(climwindows_hf[4, 11]:climwindows_hf[4, 12])) %>%
> #  group_by(year) %>%
> #  summarize(climwinmean = mean(airtmin)) %>%
> #  mutate(wood_type = "ring-porous")
> 
> #TMAX
> climwinmeans_dp_hf <- weatherdata_hf %>%
+   filter(month %in% c(5)) %>% # 68:135
+   group_by(year) %>%
+   summarize(climwinmean = mean(airtmax)) %>%
+   mutate(wood_type = "diffuse-porous")
> 
> #TMIN
> #climwinmeans_dp_hf <- weatherdata_hf %>%
> #  filter(DOY %in% c(climwindows_hf[1, 11]:climwindows_hf[1, 12])) %>% # 68:135
> #  group_by(year) %>%
> #  summarize(climwinmean = mean(airtmin)) %>%
> #  mutate(wood_type = "diffuse-porous")
> 
> # Combine
> climwinmeans_hf <- bind_rows(climwinmeans_rp_hf, climwinmeans_dp_hf)
> 
> climwinmeans_hf <- weatherdata_hf %>%
+   filter(month == 5) %>%
+   group_by(year) %>%
+   summarize(climwinmean = mean(airtmax))
> 
> # 3. Add to growth data
> Wood_pheno_table_hf <- Wood_pheno_table_hf %>%
+   #  left_join(marchmeans_hf, by = "year") %>%
+   left_join(climwinmeans_hf, by = c("year"))%>%#, "wood_type")) %>%
+   left_join(twosevenfive_hf, by = c("tag", "year")) %>%
+   left_join(fiftyseventy_hf, by = c("tag", "year")) %>%
+   left_join(twofifty_hf, by = c("tag", "year")) %>%
+   # Remove other variables
+   # select(-c(tot, dbh, max_rate_DOY, max_rate)) %>%
+   mutate(
+     perc = case_when(
+       perc == 0.25 ~ "DOY_25",
+       perc == 0.5 ~ "DOY_50",
+       perc == 0.75 ~ "DOY_75"
+     )
+   ) %>%
+   arrange(tag, year)
> 
> ### Model Fit 1 (multivariate): (DOY_25, DOY_50, DOY_75) using climwinmeans ----
> # Convert to wide format for use in rstanarm::stan_mvmer()
> Wood_pheno_table_wide_hf <- Wood_pheno_table_hf %>%
+   select(perc, tag, year, wood_type, sp, climwinmean, starts_with("DOY"), site) %>%
+   pivot_wider(names_from = perc, values_from = DOY)
> 
> # Fit multivariate model
> joint_model_climwinmeans_hf <- stan_mvmer(
+   formula = list(
+     DOY_25 ~ wood_type + wood_type:climwinmean + (1 | site) + (1 | tag),
+     DOY_50 ~ wood_type + wood_type:climwinmean + (1 | site) + (1 | tag),
+     DOY_75 ~ wood_type + wood_type:climwinmean + (1 | site) + (1 | tag)
+   ),
+   # Note we transform the data from tall/tidy format to wide format first:
+   data = Wood_pheno_table_wide_hf,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )
Fitting a multivariate glmer model.

Please note the warmup may be much slower than later iterations!

SAMPLING FOR MODEL 'mvmer' NOW (CHAIN 
SAMPLING FOR MODEL 'mvmer' NOW (CHAIN 12).
).
Chain 2: 
Chain 2: Gradient evaluation took 0.001097 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 10.97 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 1: 
Chain 1: Gradient evaluation took 0.001313 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 13.13 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 327.614 seconds (Warm-up)
Chain 1:                320.367 seconds (Sampling)
Chain 1:                647.98 seconds (Total)
Chain 1: 
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 341.738 seconds (Warm-up)
Chain 2:                318.252 seconds (Sampling)
Chain 2:                659.991 seconds (Total)
Chain 2: 
> 
> bayesian_regression_table_hf <- joint_model_climwinmeans_hf %>%
+   summary() %>%
+   as_tibble(rownames = "coefficient") %>%
+   # Keep only relevant columns:
+   select(coefficient, mean, sd, `2.5%`, `97.5%`) %>%
+   # Keep only relevant rows:
+   filter(!str_detect(coefficient, "Sigma")) %>%
+   filter(str_detect(coefficient, "(Intercept)") | str_detect(coefficient, "wood_type"))
> bayesian_regression_table_hf
# A tibble: 12 × 5
   coefficient                              mean    sd `2.5%` `97.5%`
   <chr>                                   <dbl> <dbl>  <dbl>   <dbl>
 1 y1|(Intercept)                         254.   4.54  245.    263.  
 2 y1|wood_typering-porous                -63.7  6.57  -76.6   -50.8 
 3 y1|wood_typediffuse-porous:climwinmean  -4.59 0.236  -5.05   -4.13
 4 y1|wood_typering-porous:climwinmean     -2.45 0.252  -2.95   -1.96
 5 y2|(Intercept)                         260.   3.23  253.    266.  
 6 y2|wood_typering-porous                -32.7  4.63  -41.7   -23.6 
 7 y2|wood_typediffuse-porous:climwinmean  -3.98 0.167  -4.31   -3.66
 8 y2|wood_typering-porous:climwinmean     -3.12 0.173  -3.46   -2.78
 9 y3|(Intercept)                         266.   4.27  257.    274.  
10 y3|wood_typering-porous                 16.2  6.09    4.31   28.3 
11 y3|wood_typediffuse-porous:climwinmean  -3.39 0.222  -3.83   -2.95
12 y3|wood_typering-porous:climwinmean     -4.58 0.228  -5.01   -4.14
> write.csv(bayesian_regression_table_hf, file = "Results/Bayesian outputs/DOY_HF_may.csv", row.names = FALSE)
> 
> # Extract predicted DOY_25, DOY_50, DOY_75
> # Note we need to take this long approach since tidybayes::add_predicted_draws()
> # yields incorrected predicted/fitted values for stan_mvmer models as of 2020/11/18
> # See https://github.com/mjskay/tidybayes/issues/271
> y_hat_hf <- c(
+   joint_model_climwinmeans_hf %>% posterior_predict(m = 1) %>% c(),
+   joint_model_climwinmeans_hf %>% posterior_predict(m = 2) %>% c(),
+   joint_model_climwinmeans_hf %>% posterior_predict(m = 3) %>% c()
+ )
> predictions_hf <- Wood_pheno_table_hf %>%
+   add_predicted_draws(joint_model_climwinmeans_hf) %>%
+   ungroup() %>%
+   # Critical: sort by y outcome category (DOY_25, DOY_50, DOY_75) first
+   arrange(perc, tag, year) %>%
+   mutate(predictions_rstanarm = y_hat_hf)
> 
> predictions_RP_hf <- filter(predictions_hf, wood_type == "ring-porous")
> predictions_DP_hf <- filter(predictions_hf, wood_type == "diffuse-porous")
> Wood_pheno_table_RP_hf <- filter(Wood_pheno_table_hf, wood_type == "ring-porous")
> Wood_pheno_table_DP_hf <- filter(Wood_pheno_table_hf, wood_type == "diffuse-porous")
> 
> woodtable_hf <- filter(Wood_pheno_table_hf, perc == "DOY_25")
> 
> # # Add max rate DOY
> # maxrateDOY_formulaRP <- "max_rate_DOY ~wood_type + wood_type:climwinmean + (1|site) + (1|tag)" %>% as.formula()
> #
> # mixedmodel_stanlmerRP_maxrateDOY_hf <- stan_lmer(
> #   formula = maxrateDOY_formulaRP,
> #   data = woodtable_hf,
> #   seed = 349,
> #   iter = n_iter,
> #   chains = n_chains
> # )
> #
> # MRDOY_hf <- mixedmodel_stanlmerRP_maxrateDOY_hf %>%
> #   tidy(conf.int = TRUE)
> # write.csv(MRDOY_hf, file = "Results/Bayesian outputs/MRDOY_HF_may.csv", row.names = FALSE)
> #
> # y_hat_hf <- mixedmodel_stanlmerRP_maxrateDOY_hf %>%
> #   posterior_predict() %>%
> #   c()
> #
> # predictions_mrdoy_hf <- woodtable_hf %>%
> #   add_predicted_draws(mixedmodel_stanlmerRP_maxrateDOY_hf) %>%
> #   ungroup() %>%
> #   arrange(tag, year) %>%
> #   mutate(predictions_rstanarm = y_hat_hf)
> #
> # predictions_mrdoy_RP_hf <- filter(predictions_mrdoy_hf, wood_type == "ring-porous")
> # predictions_mrdoy_DP_hf <- filter(predictions_mrdoy_hf, wood_type == "diffuse-porous")
> # Wood_pheno_table_RP_mrdoy_hf <- filter(woodtable_hf, wood_type == "ring-porous")
> # Wood_pheno_table_DP_mrdoy_hf <- filter(woodtable_hf, wood_type == "diffuse-porous")
> #
> # predictions_mrdoy_RP_hf <- filter(predictions_mrdoy_hf, wood_type == "ring-porous")
> # predictions_mrdoy_RP_hf$perc <- "Max Rate DOY"
> # #predictions_mrdoy_RP_hf$sig <- 0
> # predictions_RP_hf <- bind_rows(predictions_RP_hf, predictions_mrdoy_RP_hf)
> # predictions_mrdoy_DP_hf <- filter(predictions_mrdoy_hf, wood_type == "diffuse-porous")
> # predictions_mrdoy_DP_hf$perc <- "Max Rate DOY"
> # predictions_DP_hf <- bind_rows(predictions_DP_hf, predictions_mrdoy_DP_hf)
> #
> # Wood_pheno_table_RP_mrdoy_hf <- filter(woodtable_hf, wood_type == "ring-porous")
> # Wood_pheno_table_RP_mrdoy_hf$perc <- "Max Rate DOY"
> # Wood_pheno_table_RP_mrdoy_hf$DOY <- Wood_pheno_table_RP_mrdoy_hf$max_rate_DOY
> # Wood_pheno_table_RP_hf <- bind_rows(Wood_pheno_table_RP_mrdoy_hf,Wood_pheno_table_RP_hf)
> #
> # Wood_pheno_table_DP_mrdoy_hf <- filter(woodtable_hf, wood_type == "diffuse-porous")
> # Wood_pheno_table_DP_mrdoy_hf$perc <- "Max Rate DOY"
> # Wood_pheno_table_DP_mrdoy_hf$DOY <- Wood_pheno_table_DP_mrdoy_hf$max_rate_DOY
> # Wood_pheno_table_DP_hf <- bind_rows(Wood_pheno_table_DP_mrdoy_hf,Wood_pheno_table_DP_hf)
> 
> fig6_RP_hf <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_RP_hf, aes(x = climwinmean, y = predictions_rstanarm, fill = perc, col = perc), .width = .95, alpha = 0.15, linetype = "solid") +
+   stat_lineribbon(data = predictions_RP_hf, aes(x = climwinmean, y = predictions_rstanarm, fill = perc, col = perc), .width = 0, alpha = 0.75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_RP_hf, aes(x = climwinmean, y = DOY, col = perc)) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   scale_color_manual(values = c("orange","red","purple", "orange", "red", "purple"))+
+   scale_fill_manual(values = c("orange","red","purple", "orange", "red", "purple"))+
+   #scale_fill_brewer() +
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_RP_hf$climwinmean)-.5,max(Wood_pheno_table_RP_hf$climwinmean)+.5), ylim = c(min(Wood_pheno_table_RP_hf$DOY), max(Wood_pheno_table_RP_hf$DOY))) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35),
+         plot.title = element_text(size = 25),
+         plot.subtitle = element_text(size = 25)) +
+   labs(x = "", y = "", col = "Percentile", title = "Harvard Forest", subtitle = "Ring-porous")
> # geom_text(data = climwin_windows, aes(label = window), x = -Inf, y = -Inf, hjust = -0.01, vjust = -0.5, family = "Avenir")
> 
> fig6_DP_hf <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_DP_hf, aes(x = climwinmean, y = predictions_rstanarm, fill = perc, col = perc), .width = .95, alpha = 0.15, linetype = "solid",show.legend = FALSE) +
+   stat_lineribbon(data = predictions_DP_hf, aes(x = climwinmean, y = predictions_rstanarm, fill = perc, col = perc), .width = 0, alpha = 0.75, linetype = "solid",show.legend = FALSE) +
+   geom_point(data = Wood_pheno_table_DP_hf, aes(x = climwinmean, y = DOY, col = perc)) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   scale_color_manual(values = c("orange","red","purple", "orange", "red", "purple"),  labels = expression(DOY[25], DOY[50],DOY[75],DOY[g[max]]))+
+   scale_fill_manual(values = c("orange","red","purple", "orange", "red", "purple"))+
+   #scale_fill_brewer() +
+   theme_bw()+
+   theme(#legend.position = "none",
+     axis.text.x = element_blank(),
+     text = element_text(size = 35),
+     plot.title = element_text(size = 25),
+     plot.subtitle = element_text(size = 25)) +
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_DP_hf$climwinmean)-.5,max(Wood_pheno_table_DP_hf$climwinmean)+.5), ylim = c(min(Wood_pheno_table_DP_hf$DOY), max(Wood_pheno_table_DP_hf$DOY))) +
+   labs(x = "", y = "", fill = "Percentile", col = "Variable", title = "Harvard Forest", subtitle = "Diffuse-porous")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> ### Model Fit 2: TOTAL GROWTH ----
> total_formulaRP <- "dbh_total_growth ~ wood_type + wood_type:climwinmean + (1|site) + (1|tag)" %>% as.formula()
> 
> mixedmodel_stanlmerRP_total_hf <- stan_lmer(
+   formula = total_formulaRP,
+   data = woodtable_hf,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.001093 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 10.93 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: 
Chain 2: Gradient evaluation took 0.0005 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 5 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 89.5541 seconds (Warm-up)
Chain 1:                69.0871 seconds (Sampling)
Chain 1:                158.641 seconds (Total)
Chain 1: 
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 89.8854 seconds (Warm-up)
Chain 2:                79.6489 seconds (Sampling)
Chain 2:                169.534 seconds (Total)
Chain 2: 
Warning messages:
1: There were 2 divergent transitions after warmup. See
http://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup
to find out why this is a problem and how to eliminate them. 
2: Examine the pairs() plot to diagnose sampling problems
 
> 
> tot_hf <- mixedmodel_stanlmerRP_total_hf %>%
+   tidy(conf.int = TRUE)
> write.csv(tot_hf, file = "Results/Bayesian outputs/TOT_HF_may.csv", row.names = FALSE)
> 
> y_hot_hf <- mixedmodel_stanlmerRP_total_hf %>%
+   posterior_predict() %>%
+   c()
> 
> predictions_tot_hf <- woodtable_hf %>%
+   add_predicted_draws(mixedmodel_stanlmerRP_total_hf) %>%
+   ungroup() %>%
+   arrange(tag, year) %>%
+   mutate(predictions_rstanarm = y_hot_hf)
> 
> predictions_tot_RP_hf <- filter(predictions_tot_hf, wood_type == "ring-porous")
> predictions_tot_DP_hf <- filter(predictions_tot_hf, wood_type == "diffuse-porous")
> Wood_pheno_table_RP_tot_hf <- filter(woodtable_hf, wood_type == "ring-porous")
> Wood_pheno_table_DP_tot_hf <- filter(woodtable_hf, wood_type == "diffuse-porous")
> 
> fig6_RP_tot_hf <-   ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_tot_RP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha = .10, linetype = "solid") +
+   stat_lineribbon(data = predictions_tot_RP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_RP_tot_hf, aes(x = climwinmean, y = dbh_total_growth, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_RP_hf$climwinmean)-.5,max(Wood_pheno_table_RP_hf$climwinmean)+.5), ylim = c(-.1, 1.20)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         text = element_text(size = 35),
+         axis.text.x = element_text(size = 25),
+         axis.title.x = element_text(size = 25)) +
+   labs(x = expression(paste("May ", T[max], " (°C)")), y = "")
> 
> fig6_DP_tot_hf <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_tot_DP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha = .10, linetype = "dashed") +
+   stat_lineribbon(data = predictions_tot_DP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "dashed") +
+   geom_point(data = Wood_pheno_table_DP_tot_hf, aes(x = climwinmean, y = dbh_total_growth, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_DP_hf$climwinmean)-.5,max(Wood_pheno_table_DP_hf$climwinmean)+.5), ylim = c(-.15, 1)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         text = element_text(size = 35),
+         axis.text.x = element_text(size = 25),
+         axis.title.x = element_text(size = 25)) +
+   labs(x = expression(paste("May ", T[max], " (°C)")), y = "")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> ### Model Fit 3: Season length ----
> seasonlength_formulaRP <- "seasonlength ~ wood_type + wood_type:climwinmean + (1|site) + (1|tag)" %>% as.formula()
> 
> mixedmodel_stanlmerRP_seasonlength_hf <- stan_lmer(
+   formula = seasonlength_formulaRP,
+   data = woodtable_hf,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).
Chain 1: 
Chain Chain 2: 
Chain 2: Gradient evaluation took 0.001404 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 14.04 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
1: Gradient evaluation took 0.002358 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 23.58 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 65.8066 seconds (Warm-up)
Chain 1:                38.2381 seconds (Sampling)
Chain 1:                104.045 seconds (Total)
Chain 1: 
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 63.3571 seconds (Warm-up)
Chain 2:                58.812 seconds (Sampling)
Chain 2:                122.169 seconds (Total)
Chain 2: 
> 
> SL_hf <- mixedmodel_stanlmerRP_seasonlength_hf %>%
+   tidy(conf.int = TRUE)
> write.csv(SL_hf, file = "Results/Bayesian outputs/SL_HF_may.csv", row.names = FALSE)
> 
> y_hit_hf <- mixedmodel_stanlmerRP_seasonlength_hf %>%
+   posterior_predict() %>%
+   c()
> 
> predictions_sl_hf <- woodtable_hf %>%
+   add_predicted_draws(mixedmodel_stanlmerRP_seasonlength_hf) %>%
+   ungroup() %>%
+   arrange(tag, year) %>%
+   mutate(predictions_rstanarm = y_hit_hf)
> 
> predictions_sl_RP_hf <- filter(predictions_sl_hf, wood_type == "ring-porous")
> predictions_sl_DP_hf <- filter(predictions_sl_hf, wood_type == "diffuse-porous")
> Wood_pheno_table_RP_sl_hf <- filter(woodtable_hf, wood_type == "ring-porous")
> Wood_pheno_table_DP_sl_hf <- filter(woodtable_hf, wood_type == "diffuse-porous")
> 
> fig6_RP_sl_hf <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_sl_RP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha = .10, linetype = "solid") +
+   stat_lineribbon(data = predictions_sl_RP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_RP_sl_hf, aes(x = climwinmean, y = seasonlength, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_RP_hf$climwinmean)-.5,max(Wood_pheno_table_RP_hf$climwinmean)+.5), ylim = c(15, 100)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35)) +
+   labs(x = "", y = "")
> 
> fig6_DP_sl_hf <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_sl_DP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha = .10, linetype = "solid") +
+   stat_lineribbon(data = predictions_sl_DP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_DP_sl_hf, aes(x = climwinmean, y = seasonlength, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_DP_hf$climwinmean)-.5,max(Wood_pheno_table_DP_hf$climwinmean)+.5), ylim = c(3, 100)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35)) +
+   labs(x = "", y = "")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> ### Model Fit 4: MAX RATE ----
> maxrate_formulaRP <- "max_rate ~ wood_type + wood_type:climwinmean + (1|site) + (1|tag)" %>% as.formula()
> 
> mixedmodel_stanlmerRP_maxrate_hf <- stan_lmer(
+   formula = maxrate_formulaRP,
+   data = woodtable_hf,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0.001309 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 13.09 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 2: 
Chain 2: Gradient evaluation took 0.000604 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 6.04 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 617.555 seconds (Warm-up)
Chain 1:                140.01 seconds (Sampling)
Chain 1:                757.565 seconds (Total)
Chain 1: 
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 670.881 seconds (Warm-up)
Chain 2:                139.87 seconds (Sampling)
Chain 2:                810.751 seconds (Total)
Chain 2: 
> 
> MR_hf <- mixedmodel_stanlmerRP_maxrate_hf %>%
+   tidy(conf.int = TRUE)
> write.csv(MR_hf, file = "Results/Bayesian outputs/MR_HF_may.csv", row.names = FALSE)
> 
> y_het_hf <- mixedmodel_stanlmerRP_maxrate_hf %>%
+   posterior_predict() %>%
+   c()
> 
> predictions_mr_hf <- woodtable_hf %>%
+   add_predicted_draws(mixedmodel_stanlmerRP_maxrate_hf) %>%
+   ungroup() %>%
+   arrange(tag, year) %>%
+   mutate(predictions_rstanarm = y_het_hf)
> 
> predictions_mr_RP_hf <- filter(predictions_mr_hf, wood_type == "ring-porous")
> predictions_mr_DP_hf <- filter(predictions_mr_hf, wood_type == "diffuse-porous")
> Wood_pheno_table_RP_mr_hf <- filter(woodtable_hf, wood_type == "ring-porous")
> Wood_pheno_table_DP_mr_hf <- filter(woodtable_hf, wood_type == "diffuse-porous")
> 
> fig6_RP_mr_hf <- ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_mr_RP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha  = .15, linetype = "solid") +
+   stat_lineribbon(data = predictions_mr_RP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_RP_mr_hf, aes(x = climwinmean, y = max_rate, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_RP_hf$climwinmean)-.5,max(Wood_pheno_table_RP_hf$climwinmean)+.5), ylim = c(-.001, 0.01)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35)) +
+   labs(x = "", y = "")
> 
> fig6_DP_mr_hf <-   ggplot() +
+   # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
+   stat_lineribbon(data = predictions_mr_DP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = .95,alpha = .10, linetype = "solid") +
+   stat_lineribbon(data = predictions_mr_DP_hf, aes(x = climwinmean, y = predictions_rstanarm, col = "blue"), .width = 0,alpha = .75, linetype = "solid") +
+   geom_point(data = Wood_pheno_table_DP_mr_hf, aes(x = climwinmean, y = max_rate, col = "blue")) +
+   # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
+   #scale_fill_brewer() +
+   scale_color_manual(values = c("blue","blue"))+
+   scale_fill_manual(values = c("blue","blue"))+
+   # facet_grid(perc) +
+   coord_cartesian(xlim = c(min(Wood_pheno_table_DP_hf$climwinmean)-.5,max(Wood_pheno_table_DP_hf$climwinmean)+.5), ylim = c(-.001, 0.01)) +
+   theme_bw()+
+   theme(legend.position = "none",
+         axis.text.x = element_blank(),
+         text = element_text(size = 35)) +
+   labs(x = "", y = "")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> ### Model Fit 5: MAX RATE DOY ----
> maxrateDOY_formulaRP <- "max_rate_DOY ~wood_type + wood_type:climwinmean + (1|site) + (1|tag)" %>% as.formula()
> 
> mixedmodel_stanlmerRP_maxrateDOY_hf <- stan_lmer(
+   formula = maxrateDOY_formulaRP,
+   data = woodtable_hf,
+   seed = 349,
+   iter = n_iter,
+   chains = n_chains
+ )

SAMPLING FOR MODEL 'continuous' NOW (CHAIN 
SAMPLING FOR MODEL 'continuous' NOW (CHAIN 2).
1).
Chain 2: 
Chain 2: Gradient evaluation took 0.001765 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 17.65 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 1: 
Chain 1: Gradient evaluation took 0.000765 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 7.65 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration:    1 / 10000 [  0%]  (Warmup)
Chain 2: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 1: Iteration: 1000 / 10000 [ 10%]  (Warmup)
Chain 2: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 1: Iteration: 2000 / 10000 [ 20%]  (Warmup)
Chain 2: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 1: Iteration: 3000 / 10000 [ 30%]  (Warmup)
Chain 2: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 1: Iteration: 4000 / 10000 [ 40%]  (Warmup)
Chain 2: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 2: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 1: Iteration: 5000 / 10000 [ 50%]  (Warmup)
Chain 1: Iteration: 5001 / 10000 [ 50%]  (Sampling)
Chain 2: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 1: Iteration: 6000 / 10000 [ 60%]  (Sampling)
Chain 2: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 1: Iteration: 7000 / 10000 [ 70%]  (Sampling)
Chain 2: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 1: Iteration: 8000 / 10000 [ 80%]  (Sampling)
Chain 2: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 1: Iteration: 9000 / 10000 [ 90%]  (Sampling)
Chain 2: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 79.9253 seconds (Warm-up)
Chain 2:                71.1212 seconds (Sampling)
Chain 2:                151.046 seconds (Total)
Chain 2: 
Chain 1: Iteration: 10000 / 10000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 88.0691 seconds (Warm-up)
Chain 1:                73.4488 seconds (Sampling)
Chain 1:                161.518 seconds (Total)
Chain 1: 
> 
> MRDOY_hf <- mixedmodel_stanlmerRP_maxrateDOY_hf %>%
+   tidy(conf.int = TRUE)
> write.csv(MRDOY_hf, file = "Results/Bayesian outputs/MRDOY_HF_may.csv", row.names = FALSE)#
> 
> #y_hat_hf <- mixedmodel_stanlmerRP_maxrateDOY_hf %>%
> #  posterior_predict() %>%
> # c()
> 
> #predictions_mrdoy_hf <- woodtable_hf %>%
> #  add_predicted_draws(mixedmodel_stanlmerRP_maxrateDOY_hf) %>%
> #  ungroup() %>%
> #  arrange(tag, year) %>%
> #  mutate(predictions_rstanarm = y_hat_hf)
> 
> #predictions_mrdoy_RP_hf <- filter(predictions_mrdoy_hf, wood_type == "ring-porous")
> #predictions_mrdoy_DP_hf <- filter(predictions_mrdoy_hf, wood_type == "diffuse-porous")
> #Wood_pheno_table_RP_mrdoy_hf <- filter(woodtable_hf, wood_type == "ring-porous")
> #Wood_pheno_table_DP_mrdoy_hf <- filter(woodtable_hf, wood_type == "diffuse-porous")#
> 
> #fig6_RP_mrdoy_hf <- ggplot() +
> # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
> #  stat_lineribbon(data = predictions_mrdoy_RP_hf, aes(x = climwinmean, y = predictions_rstanarm), .width = .95, linetype = "solid") +
> #  geom_point(data = Wood_pheno_table_RP_mrdoy_hf, aes(x = climwinmean, y = max_rate_DOY)) +
> #  # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
> #  scale_fill_brewer() +
> #  # facet_grid(perc) +
> #  coord_cartesian(xlim = c(14.2,17.1), ylim = c(110, 210)) +
> #  theme_bw()+
> #  theme(legend.position = "none",
> #        axis.text.x = element_blank(),
> #        text = element_text(size = 20)) +
> #  labs(x = "", y = "")
> #
> #fig6_DP_mrdoy_hf <- ggplot() +
> #  # geom_vline(xintercept = 0, linetype = "dashed", col = "grey") +
> #  stat_lineribbon(data = predictions_mrdoy_DP_hf, aes(x = climwinmean, y = predictions_rstanarm), .width = .95, linetype = "solid") +
> #  geom_point(data = Wood_pheno_table_DP_mrdoy_hf, aes(x = climwinmean, y = max_rate_DOY)) +
> #  # geom_abline(data = posterior_lines, aes(intercept = `(Intercept)`, slope = marchmean, col = perc), size = 1) +
> #  scale_fill_brewer() +
> #  # facet_grid(perc) +
> #  coord_cartesian(xlim = c(12.6,14.3), ylim = c(120, 235)) +
> #  theme_bw()+
> #  theme(legend.position = "none",
> #        axis.text.x = element_blank(),
> #        text = element_text(size = 20)) +
> #  labs(x = "", y = "")
> 
> # Clean-up
> rm(list = setdiff(ls(), objects_to_keep))
> 
> 
> # 3. Save and combine model fit plots for SCBI and Harvard Forest together -----------------------------------------
> # End timer
> timer <- toc()
8077.297 sec elapsed
> timer$toc - timer$tic
 elapsed 
8077.297 
> 
> ## Save all figure objects ------------
> # save(list = objects_to_keep, file = "doc/manuscript/tables_figures/figures.RData")
> 
> ## Create single figure using patchwork ----------
> png(
+   filename = "doc/manuscript/tables_figures/pheno_Tsensitivity_combo_patchwork_april.png", width = 24, height = 20,
+   pointsize = 20, bg = "transparent", units = "in", res = 600
+   #restoreConsole = FALSE
+ )
> # DOY:
> fig6_RP + fig6_DP + fig6_RP_hf + fig6_DP_hf +
+   # Max rate DOY:
+   #fig6_RP_mrdoy + fig6_DP_mrdoy + fig6_RP_mrdoy_hf + fig6_DP_mrdoy_hf +
+   # Season length:
+   fig6_RP_sl + fig6_DP_sl + fig6_RP_sl_hf + fig6_DP_sl_hf +
+   # Maximum growth rate:
+   fig6_RP_mr + fig6_DP_mr + fig6_RP_mr_hf + fig6_DP_mr_hf +
+   # Total growth:
+   fig6_RP_tot + fig6_DP_tot + fig6_RP_tot_hf + fig6_DP_tot_hf +
+   plot_layout(nrow = 4)
> dev.off()
pdf 
  2 
> 
> proc.time()
     user    system   elapsed 
13484.743   277.282  8710.569 
